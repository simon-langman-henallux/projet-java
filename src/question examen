- design pattern SingletonConnection, DAO
- les couches (dataAccess, business, exception, etc...)
- 2 constructeurs ds Person mais pas dans Game et Document ? car l'identifiant de Peerson est auto-incrémenté donc dans les insert pas besoin de récupérer l'insert, mais dans Game et Document si.
- Service Layer Pattern (méthode validate dans GameService, etc)
- c'est quoi acrhitecture 3-tiers ?
- le design pattern DAO doit attraper les SQLExceptions dans les DAO pq ? c'est quoi le découplage des couches ? c'est quoi remonter les exceptions ?
- à quoi sert le package controller ? d'un point de vue de design pattern ?
- sérialisation des données ? utile dans ce projet ?

//ordre de travail : model → exception → dataAccess → business → controller → view → Launcher
// !!!!! gérer la suppression des jeux et personnes avec les documents.



Couche présentation (UI / IHM)

    Affiche les données à l’utilisateur et récupère ses actions (clics, saisies…).

    Ne contient pas de logique métier ni d’accès direct à la base.

    Exemple : fenêtres Swing, pages web, formulaires.

Couche métier (Business / Service)

    Contient les règles et traitements spécifiques au domaine du projet.

    Décide comment manipuler les données.

    Exemple : calcul d’un prix, validation d’une commande.

Couche d’accès aux données (DAO / Repository)

    Gère la communication avec la base de données ou d’autres sources de données.

    Effectue les opérations CRUD (create, read, update, delete).

    Exemple : GameDAO, PersonDAO.

Couche modèle (Model / Entities)

    Définit les objets qui représentent les données manipulées par l’application.

    Sert de lien entre la base et les autres couches.

    Exemple : classe Game avec id, title, platform.