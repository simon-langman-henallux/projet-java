- design pattern SingletonConnection, DAO
- les couches (dataAccess, business, exception, etc...)
- 2 constructeurs ds Person mais pas dans Game et Document ? car l'identifiant de Peerson est auto-incrémenté donc dans les insert pas besoin de récupérer l'insert, mais dans Game et Document si.
- Service Layer Pattern (méthode validate dans GameService, etc)
- c'est quoi acrhitecture 3-tiers ?
- le design pattern DAO doit attraper les SQLExceptions dans les DAO pq ? c'est quoi le découplage des couches ? c'est quoi remonter les exceptions ?
- à quoi sert le package controller ? d'un point de vue de design pattern ?
- sérialisation des données ? utile dans ce projet ?

//ordre de travail : model → exception → dataAccess → business → controller → view → Launcher
// !!!!! gérer la suppression des jeux et personnes avec les documents.